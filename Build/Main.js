"use strict";
//#region "Imports"
///<reference types="../FUDGE/Core/Build/FudgeCore.js"/>
///<reference types="../FUDGE/Aid/Build/FudgeAid.js"/>
//#endregion "Imports"
var Game;
//#region "Imports"
///<reference types="../FUDGE/Core/Build/FudgeCore.js"/>
///<reference types="../FUDGE/Aid/Build/FudgeAid.js"/>
//#endregion "Imports"
(function (Game) {
    Game.ƒ = FudgeCore;
    Game.ƒAid = FudgeAid;
    //#region "DomElements"
    Game.canvas = document.getElementById("Canvas");
    window.addEventListener("load", init);
    //#endregion "DomElements"
    //#region "PublicVariables"
    Game.viewport = new Game.ƒ.Viewport();
    Game.graph = new Game.ƒ.Node("Graph");
    Game.connected = false;
    //#endregion "PublicVariables"
    //#region "PrivateVariables"
    let cmpCamera = new Game.ƒ.ComponentCamera();
    //#endregion "PrivateVariables"
    //#region "essential"
    async function init() {
        Game.player = new Player.Player("Player1", "11", new Player.Character("Thor,", new Player.Attributes(10, 5, 5)));
        Game.player.addComponent(cmpCamera);
        damping();
        Game.ƒ.Debug.log(Game.player);
        let node = new Game.ƒ.Node("Quad");
        node.addComponent(new Game.ƒ.ComponentTransform());
        let mesh = new Game.ƒ.MeshQuad();
        let cmpMesh = new Game.ƒ.ComponentMesh(mesh);
        node.addComponent(cmpMesh);
        let mtrSolidWhite = new Game.ƒ.Material("SolidWhite", Game.ƒ.ShaderFlat, new Game.ƒ.CoatTextured(Game.ƒ.Color.CSS("WHITE")));
        let cmpMaterial = new Game.ƒ.ComponentMaterial(mtrSolidWhite);
        node.addComponent(cmpMaterial);
        let newTxt = new Game.ƒ.TextureImage();
        let newCoat = new Game.ƒ.CoatTextured();
        let oldComCoat = new Game.ƒ.ComponentMaterial();
        let newMtr = new Game.ƒ.Material("mtr", Game.ƒ.ShaderFlatTextured, newCoat);
        let oldPivot = new Game.ƒ.Matrix4x4();
        oldComCoat = node.getComponent(Game.ƒ.ComponentMaterial);
        oldPivot = node.getComponent(Game.ƒ.ComponentMesh).mtxPivot;
        await newTxt.load("./Resources/Image/gras.png");
        newCoat.color = Game.ƒ.Color.CSS("WHITE");
        newCoat.texture = newTxt;
        oldComCoat.material = newMtr;
        node.cmpTransform.mtxLocal.scale(new Game.ƒ.Vector3(50, 50, 1));
        node.cmpTransform.mtxLocal.translateZ(-1);
        Game.graph.addChild(node);
        Game.graph.appendChild(Game.player);
        Game.ƒAid.addStandardLightComponents(Game.graph);
        cmpCamera.mtxPivot.translateZ(25);
        cmpCamera.mtxPivot.rotateY(180);
        Game.ƒ.Debug.log(Game.graph);
        Game.viewport.initialize("Viewport", Game.graph, cmpCamera, Game.canvas);
        draw();
        Game.ƒ.Loop.start(Game.ƒ.LOOP_MODE.TIME_GAME, 60);
    }
    function waitOnConnection() {
        if (Networking.client != undefined && Networking.client.id != null || undefined) {
            document.getElementById("ConnectionGUI").style.visibility = "hidden";
            init();
        }
        else {
            setTimeout(waitOnConnection, 300);
        }
    }
    function draw() {
        Game.viewport.draw();
    }
    function update() {
        InputSystem.move();
        draw();
        damping();
    }
    Game.ƒ.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update);
    //#endregion "essential"
    function damping() {
        // ƒ.Debug.log("test: " + cmpCamera.mtxWorldToView.translation);
    }
})(Game || (Game = {}));
var Spawn;
(function (Spawn) {
    class Spawnables extends Game.ƒAid.NodeSprite {
        position;
        lifetime;
        constructor(_name, _position, _lifetime) {
            super(_name);
            this.addComponent(new ƒ.ComponentTransform());
            this.position = this.cmpTransform.mtxLocal.translation;
            this.lifetime = _lifetime;
        }
        lifespan() {
            if (this.lifetime > 0) {
                this.lifetime--;
            }
        }
    }
    Spawn.Spawnables = Spawnables;
})(Spawn || (Spawn = {}));
var Player;
(function (Player) {
    class Attributes {
        healthPoints;
        speed;
        attackPoints;
        constructor(_healthPoints, _attackPoints, _speed) {
            this.healthPoints = _healthPoints;
            this.attackPoints = _attackPoints;
            this.speed = _speed;
        }
    }
    Player.Attributes = Attributes;
})(Player || (Player = {}));
var Spawn;
(function (Spawn) {
    class Bullet extends Spawn.Spawnables {
        constructor(_name, _position, _lifetime) {
            super(_name, _position, _lifetime);
        }
    }
    Spawn.Bullet = Bullet;
})(Spawn || (Spawn = {}));
var Player;
(function (Player) {
    class Character {
        name;
        attributes;
        constructor(name, attributes) {
            this.name = name;
            this.attributes = attributes;
        }
    }
    Player.Character = Character;
})(Player || (Player = {}));
var InputSystem;
(function (InputSystem) {
    document.addEventListener("keydown", keyboardDownEvent);
    document.addEventListener("keyup", keyboardUpEvent);
    Game.canvas.addEventListener("mousedown", attack);
    let controller = new Map([
        ["W", false],
        ["A", false],
        ["S", false],
        ["D", false]
    ]);
    function keyboardDownEvent(_e) {
        let key = _e.code.toUpperCase().substring(3);
        controller.set(key, true);
    }
    function keyboardUpEvent(_e) {
        let key = _e.code.toUpperCase().substring(3);
        controller.set(key, false);
    }
    function move() {
        let moveVector = Game.ƒ.Vector3.ZERO();
        let hasChanged = false;
        if (controller.get("W")) {
            moveVector.y += 1;
            hasChanged = true;
        }
        if (controller.get("A")) {
            moveVector.x -= 1;
            hasChanged = true;
        }
        if (controller.get("S")) {
            moveVector.y -= 1;
            hasChanged = true;
        }
        if (controller.get("D")) {
            moveVector.x += 1;
            hasChanged = true;
        }
        if (hasChanged && moveVector.magnitude != 0) {
            Game.player.move(Game.ƒ.Vector3.NORMALIZATION(moveVector, 1));
            //update new transform 
            if (Game.connected) {
                Networking.updatePosition(Game.ƒ.Vector3.NORMALIZATION(moveVector, 1));
            }
        }
    }
    InputSystem.move = move;
    function attack(e_) {
        let mouseButton = e_.button;
        switch (mouseButton) {
            case 0:
                //TODO: left mouse button player.attack
                break;
            case 2:
                //TODO: right mouse button player.charge or something like that
                break;
            default:
                break;
        }
    }
})(InputSystem || (InputSystem = {}));
var Items;
(function (Items) {
    class Item extends Spawn.Spawnables {
        description;
        constructor(_name, _lifetime, _position, _description) {
            super(_name, _position, _lifetime);
            this.description = _description;
        }
    }
    Items.Item = Item;
})(Items || (Items = {}));
var Level;
(function (Level) {
    class Landscape extends ƒ.Node {
        constructor(_name) {
            super(_name);
            // this.getChildren()[0].getComponent(Game.ƒ.ComponentTransform).mtxLocal.translateZ(-2)
            console.log();
        }
    }
    Level.Landscape = Landscape;
})(Level || (Level = {}));
///<reference path="../FUDGE/Net/Build/Client/FudgeClient.d.ts"/>
var Networking;
///<reference path="../FUDGE/Net/Build/Client/FudgeClient.d.ts"/>
(function (Networking) {
    let FUNCTION;
    (function (FUNCTION) {
        FUNCTION[FUNCTION["SPAWN"] = 0] = "SPAWN";
        FUNCTION[FUNCTION["TRANSFORM"] = 1] = "TRANSFORM";
    })(FUNCTION = Networking.FUNCTION || (Networking.FUNCTION = {}));
    var ƒClient = FudgeNet.FudgeClient;
    let portHost = document.getElementById("PortHost");
    document.getElementById("Host").addEventListener("click", hostServer, true);
    let IPConnection = document.getElementById("IPConnection");
    let PortConnection = document.getElementById("PortConnection");
    document.getElementById("Connecting").addEventListener("click", conneting, true);
    function hostServer() {
        Networking.client.dispatch({ route: FudgeNet.ROUTE.VIA_SERVER, content: { text: FUNCTION.SPAWN, value: Game.player.hero } });
        Game.connected = true;
    }
    function conneting() {
        Networking.client = new ƒClient();
        Networking.client.addEventListener(FudgeNet.EVENT.MESSAGE_RECEIVED, receiveMessage);
        Networking.client.connectToServer(IPConnection.value + PortConnection.value);
        console.log(+IPConnection.value);
        console.log(IPConnection.value + PortConnection.value);
    }
    async function receiveMessage(_event) {
        if (_event instanceof MessageEvent) {
            let message = JSON.parse(_event.data);
            if (message.idSource != Networking.client.id) {
                if (message.command != FudgeNet.COMMAND.SERVER_HEARTBEAT && message.command != FudgeNet.COMMAND.CLIENT_HEARTBEAT) {
                    if (message.content != undefined && message.content.text == FUNCTION.SPAWN.toString()) {
                        console.log(message.content.value);
                        Game.player2 = new Player.Player("player2", message.idSource.toString(), new Player.Character("Thorian", new Player.Attributes(100, 10, 5)));
                        Game.graph.appendChild(Game.player2);
                    }
                    if (message.content != undefined && message.content.text == FUNCTION.TRANSFORM.toString()) {
                        let moveVector = new Game.ƒ.Vector3(message.content.value.data[0], message.content.value.data[1], message.content.value.data[2]);
                        Game.player2.move(moveVector);
                        // console.log(Game.player2.cmpTransform.mtxLocal.translation);
                    }
                }
            }
        }
    }
    /**
     * sends transform over network
     * @param __position current position of Object
     */
    function updatePosition(_position) {
        Networking.client.dispatch({ route: FudgeNet.ROUTE.VIA_SERVER, content: { text: FUNCTION.TRANSFORM, value: _position } });
    }
    Networking.updatePosition = updatePosition;
    window.addEventListener("beforeunload", onUnload, false);
    function onUnload() {
        //TODO: do we need to close connections?
    }
})(Networking || (Networking = {}));
var Player;
(function (Player_1) {
    class Player extends Game.ƒAid.NodeSprite {
        authority;
        items;
        hero;
        position;
        constructor(_name, _authority, _hero) {
            super(_name);
            this.addComponent(new ƒ.ComponentTransform());
            this.authority = _authority;
            this.hero = _hero;
            this.position = this.cmpTransform.mtxLocal.translation;
        }
        move(_direction) {
            // if (Networking.client.id == this.authority) {
            _direction.scale((1 / 60 * this.hero.attributes.speed));
            this.cmpTransform.mtxLocal.translate(_direction);
            this.position = ƒ.Vector3.SUM(this.position, _direction);
            ƒ.Debug.log("position: " + this.position);
            // }
        }
        attack() {
        }
    }
    Player_1.Player = Player;
})(Player || (Player = {}));
//# sourceMappingURL=data:application/json;base64,