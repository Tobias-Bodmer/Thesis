"use strict";
//#region "Imports"
///<reference types="../FUDGE/Core/Build/FudgeCore.js"/>
///<reference types="../FUDGE/Aid/Build/FudgeAid.js"/>
//#endregion "Imports"
var Game;
//#region "Imports"
///<reference types="../FUDGE/Core/Build/FudgeCore.js"/>
///<reference types="../FUDGE/Aid/Build/FudgeAid.js"/>
//#endregion "Imports"
(function (Game) {
    Game.ƒ = FudgeCore;
    Game.ƒAid = FudgeAid;
    //#region "DomElements"
    Game.canvas = document.getElementById("Canvas");
    window.addEventListener("load", waitOnConnection);
    //#endregion "DomElements"
    //#region "PublicVariables"
    Game.viewport = new Game.ƒ.Viewport();
    Game.graph = new Game.ƒ.Node("Graph");
    //#endregion "PublicVariables"
    //#region "PrivateVariables"
    let cmpCamera = new Game.ƒ.ComponentCamera();
    //#endregion "PrivateVariables"
    //#region "essential"
    function init() {
        cmpCamera.mtxPivot.translateZ(15);
        cmpCamera.mtxPivot.rotateX(180);
        cmpCamera.mtxPivot.lookAt(Game.ƒ.Vector3.ZERO(), Game.ƒ.Vector3.Y());
        Game.graph.addChild(new Game.ƒAid.Node("blob", Game.ƒ.Matrix4x4.IDENTITY(), new Game.ƒ.Material("mtrCharacter", Game.ƒ.ShaderFlat, new Game.ƒ.CoatColored(Game.ƒ.Color.CSS("withe", 0))), new Game.ƒ.MeshCube()));
        Game.graph.getChildren()[0].mtxLocal.scale(new Game.ƒ.Vector3(1, 1, 1));
        console.log(Game.graph.getChildren()[0].name);
        Game.viewport.initialize("Viewport", Game.graph, cmpCamera, Game.canvas);
        draw();
    }
    function waitOnConnection() {
        if (Networking.client != undefined && Networking.client.id != null || undefined) {
            document.getElementById("ConnectionGUI").style.visibility = "hidden";
            init();
        }
        else {
            setTimeout(waitOnConnection, 300);
        }
    }
    function draw() {
        Game.viewport.draw();
    }
    function update() {
        draw();
    }
    Game.ƒ.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update);
    Game.ƒ.Loop.start(Game.ƒ.LOOP_MODE.TIME_GAME, 69);
    //#endregion "essential"
})(Game || (Game = {}));
var InputSystem;
(function (InputSystem) {
    Game.canvas.addEventListener("keypress", move);
    Game.canvas.addEventListener("mousedown", attack);
    function move(_e) {
        let key = _e.code.toUpperCase();
        let moveVector = new Game.ƒ.Vector2();
        switch (key) {
            case "W":
                moveVector.y += 1;
                break;
            case "A":
                moveVector.x -= 1;
                break;
            case "S":
                moveVector.y -= 1;
                break;
            case "D":
                moveVector.x += 1;
                break;
            default:
                break;
        }
        // player.move
    }
    function attack(e_) {
        let mouseButton = e_.button;
        switch (mouseButton) {
            case 0:
                //TODO: left mouse button player.attack
                break;
            case 2:
                //TODO: right mouse button player.charge or something like that
                break;
            default:
                break;
        }
    }
})(InputSystem || (InputSystem = {}));
var Items;
(function (Items) {
    class Item {
        constructor() {
        }
    }
    Items.Item = Item;
})(Items || (Items = {}));
var Level;
(function (Level) {
    class Landscape extends ƒ.Node {
        constructor(_name) {
            super(_name);
            // this.getChildren()[0].getComponent(Game.ƒ.ComponentTransform).mtxLocal.translateZ(-2)
            console.log();
        }
    }
    Level.Landscape = Landscape;
})(Level || (Level = {}));
///<reference path="../FUDGE/Net/Build/Client/FudgeClient.d.ts"/>
///<reference path="../FUDGE/Net/Build/Server/FudgeServer.d.ts"/>
var Networking;
///<reference path="../FUDGE/Net/Build/Client/FudgeClient.d.ts"/>
///<reference path="../FUDGE/Net/Build/Server/FudgeServer.d.ts"/>
(function (Networking) {
    var ƒClient = FudgeNet.FudgeClient;
    let portHost = document.getElementById("PortHost");
    document.getElementById("Host").addEventListener("click", hostServer, true);
    let IPConnection = document.getElementById("IPConnection");
    let PortConnection = document.getElementById("PortConnection");
    document.getElementById("Connecting").addEventListener("click", conneting, true);
    function hostServer() {
        if (!isNaN(+portHost.value)) {
            //TODO: learn FudgeNet
            // let host = new FudgeServer();
            // host.startUp(+portHost.value);
            // console.log(host);
        }
        else {
            alert("Your Port is not a number");
        }
    }
    function conneting() {
        Networking.client = new ƒClient();
        Networking.client.connectToServer(IPConnection.value + PortConnection.value);
        console.log(+IPConnection.value);
        console.log(IPConnection.value + PortConnection.value);
    }
    window.addEventListener("beforeunload", onUnload, false);
    function onUnload() {
        //TODO: do we need to close connections?
    }
})(Networking || (Networking = {}));
var Player;
(function (Player_1) {
    class Player extends ƒAid.NodeSprite {
        authority;
        healthPoints;
        attackPoints;
        items;
        constructor(_name, _authority) {
            super(_name);
            this.authority = _authority;
        }
        move(_direction) {
            if (Networking.client.id == this.authority) {
                this.mtxLocal.translate(new ƒ.Vector3(_direction.x, 0, _direction.y));
            }
        }
        attack() {
        }
    }
    Player_1.Player = Player;
})(Player || (Player = {}));
//# sourceMappingURL=data:application/json;base64,