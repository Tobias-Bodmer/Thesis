"use strict";
//#region "Imports"
///<reference types="../FUDGE/Core/Build/FudgeCore.js"/>
///<reference types="../FUDGE/Aid/Build/FudgeAid.js"/>
//#endregion "Imports"
var Game;
//#region "Imports"
///<reference types="../FUDGE/Core/Build/FudgeCore.js"/>
///<reference types="../FUDGE/Aid/Build/FudgeAid.js"/>
//#endregion "Imports"
(function (Game) {
    Game.ƒ = FudgeCore;
    Game.ƒAid = FudgeAid;
    //#region "DomElements"
    Game.canvas = document.getElementById("Canvas");
    let crc2 = Game.canvas.getContext("2d");
    window.addEventListener("load", init);
    Game.canvas.addEventListener("mouseover", doSmth);
    //#endregion "DomElements"
    //#region "PublicVariables"
    Game.viewport = new Game.ƒ.Viewport();
    Game.graph = new Game.ƒ.Node("Graph");
    Game.connected = false;
    //#endregion "PublicVariables"
    //#region "PrivateVariables"
    let item1;
    let cmpCamera = new Game.ƒ.ComponentCamera();
    let frameRate = 60;
    //#endregion "PrivateVariables"
    function doSmth(_mouseEvent) {
        // let pointer: ƒ.Vector2 = new ƒ.Vector2(_mouseEvent.pageX, _mouseEvent.pageY);
        // let ray: ƒ.Ray = viewport.getRayFromClient(pointer);
        // let hit: ƒ.RayHitInfo = ƒ.Physics.raycast(ray.origin, ray.direction);
        // console.log(hit.hitPoint);
        // let player3 = new Player.Player("Player3,", "12", new Player.Character("Thohor", new Player.Attributes(10, 5, 5)));
        // graph.appendChild(player3);
        // player3.cmpTransform.mtxLocal.translation = new ƒ.Vector3(0, 2, 0);
        // Game.ƒ.RayHitInfo.length
        // let pickData: Pick[] = ƒ.Picker.pickViewport(viewport, new ƒ.Vector2(_mouseEvent.clientX, _mouseEvent.clientY));
        // console.log(pickData);
        // ƒ.Ray
    }
    //#region "essential"
    async function init() {
        Game.player = new Player.Player("Player1", "11", new Player.Character("Thor,", new Player.Attributes(10, 5, 5)));
        Game.player.addComponent(cmpCamera);
        Game.ƒ.Debug.log(Game.player);
        //#region init Items
        item1 = new Items.Item("Item1", "", new Game.ƒ.Vector3(0, 5, 0));
        //#endregion
        let node = new Game.ƒ.Node("Quad");
        node.addComponent(new Game.ƒ.ComponentTransform());
        let mesh = new Game.ƒ.MeshQuad();
        let cmpMesh = new Game.ƒ.ComponentMesh(mesh);
        node.addComponent(cmpMesh);
        let mtrSolidWhite = new Game.ƒ.Material("SolidWhite", Game.ƒ.ShaderFlat, new Game.ƒ.CoatRemissive(Game.ƒ.Color.CSS("white")));
        let cmpMaterial = new Game.ƒ.ComponentMaterial(mtrSolidWhite);
        node.addComponent(cmpMaterial);
        let newTxt = new Game.ƒ.TextureImage();
        let newCoat = new Game.ƒ.CoatRemissiveTextured();
        let oldComCoat = new Game.ƒ.ComponentMaterial();
        let newMtr = new Game.ƒ.Material("mtr", Game.ƒ.ShaderFlatTextured, newCoat);
        let oldPivot = new Game.ƒ.Matrix4x4();
        oldComCoat = node.getComponent(Game.ƒ.ComponentMaterial);
        oldPivot = node.getComponent(Game.ƒ.ComponentMesh).mtxPivot;
        await newTxt.load("./Resources/Image/gras.png");
        newCoat.color = Game.ƒ.Color.CSS("WHITE");
        newCoat.texture = newTxt;
        oldComCoat.material = newMtr;
        node.cmpTransform.mtxLocal.scale(new Game.ƒ.Vector3(50, 50, 1));
        node.cmpTransform.mtxLocal.translateZ(-0.01);
        Game.graph.addChild(node);
        Game.graph.appendChild(Game.player);
        Game.graph.appendChild(item1);
        Game.ƒAid.addStandardLightComponents(Game.graph);
        cmpCamera.mtxPivot.translateZ(25);
        cmpCamera.mtxPivot.rotateY(180);
        Game.ƒ.Debug.log(Game.graph);
        Game.viewport.initialize("Viewport", Game.graph, cmpCamera, Game.canvas);
        draw();
        Game.ƒ.Loop.start(Game.ƒ.LOOP_MODE.TIME_GAME, frameRate);
    }
    function waitOnConnection() {
        if (Networking.client != undefined && Networking.client.id != null || undefined) {
            document.getElementById("ConnectionGUI").style.visibility = "hidden";
            init();
        }
        else {
            setTimeout(waitOnConnection, 300);
        }
    }
    function draw() {
        Game.viewport.draw();
    }
    function update() {
        InputSystem.move();
        draw();
        //#region count items
        let items = Game.graph.getChildren().filter(element => element.lifetime != null);
        items.forEach(element => {
            element.lifespan(Game.graph);
        });
        //#endregion
    }
    Game.ƒ.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update);
    //#endregion "essential"
})(Game || (Game = {}));
var Items;
(function (Items) {
    let ITEMTYPE;
    (function (ITEMTYPE) {
        ITEMTYPE[ITEMTYPE["ADD"] = 0] = "ADD";
        ITEMTYPE[ITEMTYPE["SUBSTRACT"] = 1] = "SUBSTRACT";
        ITEMTYPE[ITEMTYPE["PROCENTUAL"] = 2] = "PROCENTUAL";
    })(ITEMTYPE = Items.ITEMTYPE || (Items.ITEMTYPE = {}));
    class AttributeItem extends Items.Item {
        type;
        attributes;
        /**
         * Creates an item that can change Attributes of the player
         * @param _name name of the Item
         * @param _description Descirption of the item
         * @param _position Position where to spawn
         * @param _lifetime optional: how long is the item visible
         * @param _attributes define which attributes will change, compare with {@link Player.Attributes}
         */
        constructor(_name, _description, _position, _lifetime, _attributes, _type) {
            super(_name, _description, _position, _lifetime);
            this.attributes = _attributes;
            this.type = _type;
        }
    }
    Items.AttributeItem = AttributeItem;
})(Items || (Items = {}));
var Player;
(function (Player) {
    class Attributes {
        healthPoints;
        speed;
        attackPoints;
        constructor(_healthPoints, _attackPoints, _speed) {
            this.healthPoints = _healthPoints;
            this.attackPoints = _attackPoints;
            this.speed = _speed;
        }
    }
    Player.Attributes = Attributes;
})(Player || (Player = {}));
var Spawn;
(function (Spawn) {
    class Bullet extends Game.ƒAid.NodeSprite {
        attackPoints;
        position;
        lifetime;
        lifespan() {
            if (this.lifetime > 0) {
                return false;
            }
            return true;
        }
    }
    Spawn.Bullet = Bullet;
})(Spawn || (Spawn = {}));
var Player;
(function (Player) {
    class Character {
        name;
        attributes;
        constructor(name, attributes) {
            this.name = name;
            this.attributes = attributes;
        }
    }
    Player.Character = Character;
})(Player || (Player = {}));
var Enemy;
(function (Enemy_1) {
    class Enemy {
    }
    Enemy_1.Enemy = Enemy;
})(Enemy || (Enemy = {}));
var InputSystem;
(function (InputSystem) {
    document.addEventListener("keydown", keyboardDownEvent);
    document.addEventListener("keyup", keyboardUpEvent);
    Game.canvas.addEventListener("mousedown", attack);
    let controller = new Map([
        ["W", false],
        ["A", false],
        ["S", false],
        ["D", false]
    ]);
    function keyboardDownEvent(_e) {
        let key = _e.code.toUpperCase().substring(3);
        controller.set(key, true);
    }
    function keyboardUpEvent(_e) {
        let key = _e.code.toUpperCase().substring(3);
        controller.set(key, false);
    }
    function move() {
        let moveVector = Game.ƒ.Vector3.ZERO();
        let hasChanged = false;
        if (controller.get("W")) {
            moveVector.y += 1;
            hasChanged = true;
        }
        if (controller.get("A")) {
            moveVector.x -= 1;
            hasChanged = true;
        }
        if (controller.get("S")) {
            moveVector.y -= 1;
            hasChanged = true;
        }
        if (controller.get("D")) {
            moveVector.x += 1;
            hasChanged = true;
        }
        if (hasChanged && moveVector.magnitude != 0) {
            Game.player.move(Game.ƒ.Vector3.NORMALIZATION(moveVector, 1));
            //update new transform 
            if (Game.connected) {
                Networking.updatePosition(Game.ƒ.Vector3.NORMALIZATION(moveVector, 1));
            }
        }
    }
    InputSystem.move = move;
    function attack(e_) {
        let mouseButton = e_.button;
        switch (mouseButton) {
            case 0:
                //TODO: left mouse button player.attack
                break;
            case 2:
                //TODO: right mouse button player.charge or something like that
                break;
            default:
                break;
        }
    }
})(InputSystem || (InputSystem = {}));
var Items;
(function (Items) {
    class Item extends Game.ƒAid.NodeSprite {
        description;
        position;
        lifetime;
        constructor(_name, _description, _position, _lifetime) {
            super(_name);
            this.description = _description;
            this.lifetime = _lifetime;
            this.addComponent(new ƒ.ComponentTransform());
            this.cmpTransform.mtxLocal.translate(_position);
        }
        lifespan(_graph) {
            if (this.lifetime >= 0 && this.lifetime != null) {
                this.lifetime--;
                ƒ.Debug.log(this.name + ": " + this.lifetime);
                if (this.lifetime < 0) {
                    _graph.removeChild(this);
                }
            }
        }
    }
    Items.Item = Item;
})(Items || (Items = {}));
var Level;
(function (Level) {
    class Landscape extends ƒ.Node {
        constructor(_name) {
            super(_name);
            // this.getChildren()[0].getComponent(Game.ƒ.ComponentTransform).mtxLocal.translateZ(-2)
            console.log();
        }
    }
    Level.Landscape = Landscape;
})(Level || (Level = {}));
///<reference path="../FUDGE/Net/Build/Client/FudgeClient.d.ts"/>
var Networking;
///<reference path="../FUDGE/Net/Build/Client/FudgeClient.d.ts"/>
(function (Networking) {
    let FUNCTION;
    (function (FUNCTION) {
        FUNCTION[FUNCTION["SPAWN"] = 0] = "SPAWN";
        FUNCTION[FUNCTION["TRANSFORM"] = 1] = "TRANSFORM";
    })(FUNCTION = Networking.FUNCTION || (Networking.FUNCTION = {}));
    var ƒClient = FudgeNet.FudgeClient;
    let portHost = document.getElementById("PortHost");
    document.getElementById("Host").addEventListener("click", hostServer, true);
    let IPConnection = document.getElementById("IPConnection");
    let PortConnection = document.getElementById("PortConnection");
    document.getElementById("Connecting").addEventListener("click", conneting, true);
    function hostServer() {
        Networking.client.dispatch({ route: FudgeNet.ROUTE.VIA_SERVER, content: { text: FUNCTION.SPAWN, value: Game.player.hero, position: Game.player.cmpTransform.mtxLocal.translation } });
        Game.connected = true;
    }
    function conneting() {
        Networking.client = new ƒClient();
        Networking.client.addEventListener(FudgeNet.EVENT.MESSAGE_RECEIVED, receiveMessage);
        Networking.client.connectToServer(IPConnection.value + PortConnection.value);
        console.log(+IPConnection.value);
        console.log(IPConnection.value + PortConnection.value);
    }
    async function receiveMessage(_event) {
        if (_event instanceof MessageEvent) {
            let message = JSON.parse(_event.data);
            if (message.idSource != Networking.client.id) {
                if (message.command != FudgeNet.COMMAND.SERVER_HEARTBEAT && message.command != FudgeNet.COMMAND.CLIENT_HEARTBEAT) {
                    if (message.content != undefined && message.content.text == FUNCTION.SPAWN.toString()) {
                        console.log(message.content.value);
                        Game.player2 = new Player.Player("player2", message.idSource.toString(), new Player.Character("Thorian", new Player.Attributes(100, 10, 5)));
                        Game.player2.mtxLocal.translation = new Game.ƒ.Vector3(message.content.position.data[0], message.content.position.data[1], message.content.position.data[2]);
                        Game.graph.appendChild(Game.player2);
                    }
                    if (message.content != undefined && message.content.text == FUNCTION.TRANSFORM.toString()) {
                        let moveVector = new Game.ƒ.Vector3(message.content.value.data[0], message.content.value.data[1], message.content.value.data[2]);
                        Game.player2.move(moveVector);
                        // console.log(Game.player2.cmpTransform.mtxLocal.translation);
                    }
                }
            }
        }
    }
    /**
     * sends transform over network
     * @param __position current position of Object
     */
    function updatePosition(_position) {
        Networking.client.dispatch({ route: FudgeNet.ROUTE.VIA_SERVER, content: { text: FUNCTION.TRANSFORM, value: _position } });
    }
    Networking.updatePosition = updatePosition;
    window.addEventListener("beforeunload", onUnload, false);
    function onUnload() {
        //TODO: do we need to close connections?
    }
})(Networking || (Networking = {}));
var Player;
(function (Player_1) {
    class Player extends Game.ƒAid.NodeSprite {
        authority;
        items;
        hero;
        rect1;
        constructor(_name, _authority, _hero) {
            super(_name);
            this.addComponent(new ƒ.ComponentTransform());
            this.authority = _authority;
            this.hero = _hero;
        }
        move(_direction) {
            // if (Networking.client.id == this.authority) {
            _direction.scale((1 / 60 * this.hero.attributes.speed));
            this.cmpTransform.mtxLocal.translate(_direction);
            // }
        }
        attack() {
        }
        collector() {
        }
        /**
         * adds Attributes to the Player Attributes
         * @param _attributes incoming attributes
         */
        addAttribuesByItem(_item) {
            switch (_item.type) {
                case Items.ITEMTYPE.ADD:
                    break; // calculate attributes by adding them
                case Items.ITEMTYPE.SUBSTRACT:
                    break; // calculate attribes by substacting them
                case Items.ITEMTYPE.PROCENTUAL:
                    break; // calculate attributes by giving spefic %
            }
        }
    }
    Player_1.Player = Player;
})(Player || (Player = {}));
//# sourceMappingURL=data:application/json;base64,