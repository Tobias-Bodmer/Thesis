"use strict";
var Level;
(function (Level) {
    class Landscape extends ƒ.Node {
        constructor(_name) {
            super(_name);
            this.addChild(new Game.ƒAid.Node("blob", new ƒ.Matrix4x4(), new ƒ.Material("white", ƒ.ShaderFlat, new ƒ.CoatColored(new ƒ.Color(1, 1, 1, 0), 1))));
            // this.getChildren()[0].getComponent(Game.ƒ.ComponentTransform).mtxLocal.translateZ(-2)
            console.log();
        }
    }
    Level.Landscape = Landscape;
})(Level || (Level = {}));
//#region "Imports"
///<reference types="../FUDGE/Core/Build/FudgeCore.js"/>
///<reference types="../FUDGE/Aid/Build/FudgeAid.js"/>
///<reference path="../FUDGE/Net/Build/Client/FudgeClient.d.ts"/>
///<reference path="../FUDGE/Net/Build/Server/FudgeServer.d.ts"/>
//#endregion "Imports"
var Game;
//#region "Imports"
///<reference types="../FUDGE/Core/Build/FudgeCore.js"/>
///<reference types="../FUDGE/Aid/Build/FudgeAid.js"/>
///<reference path="../FUDGE/Net/Build/Client/FudgeClient.d.ts"/>
///<reference path="../FUDGE/Net/Build/Server/FudgeServer.d.ts"/>
//#endregion "Imports"
(function (Game) {
    Game.ƒ = FudgeCore;
    Game.ƒAid = FudgeAid;
    var ƒClient = FudgeNet.FudgeClient;
    // import ƒServer = FudgeServer;
    //#region "DomElements"
    let canvas = document.getElementById("Canvas");
    let portHost = document.getElementById("PortHost");
    document.getElementById("Host").addEventListener("click", hostServer, true);
    let IPConnection = document.getElementById("IPConnection");
    let PortConnection = document.getElementById("PortConnection");
    document.getElementById("Connecting").addEventListener("click", conneting, true);
    window.addEventListener("load", init);
    //#endregion "DomElements"
    //#region "PublicVariables"
    Game.viewport = new Game.ƒ.Viewport();
    Game.graph = new Game.ƒ.Node("Graph");
    //#endregion "PublicVariables"
    //#region "PrivateVariables"
    let cmpCamera = new Game.ƒ.ComponentCamera();
    //#endregion "PrivateVariables"
    //#region "essential"
    function init() {
        cmpCamera.mtxPivot.translateZ(15);
        cmpCamera.mtxPivot.rotateX(180);
        cmpCamera.mtxPivot.lookAt(Game.ƒ.Vector3.ZERO(), Game.ƒ.Vector3.Y());
        Game.graph.addChild(new Game.ƒAid.Node("blob", Game.ƒ.Matrix4x4.IDENTITY(), new Game.ƒ.Material("mtrCharacter", Game.ƒ.ShaderFlat, new Game.ƒ.CoatColored(Game.ƒ.Color.CSS("withe", 0))), new Game.ƒ.MeshCube()));
        Game.graph.getChildren()[0].mtxLocal.scale(new Game.ƒ.Vector3(1, 1, 1));
        console.log(Game.graph.getChildren()[0].name);
        Game.viewport.initialize("Viewport", Game.graph, cmpCamera, canvas);
        draw();
    }
    function draw() {
        Game.viewport.draw();
    }
    function update() {
        draw();
    }
    Game.ƒ.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update);
    Game.ƒ.Loop.start(Game.ƒ.LOOP_MODE.TIME_GAME, 69);
    //#endregion "essential"
    //#region "FudgeNetComponent"
    function hostServer() {
        if (!isNaN(+portHost.value)) {
            //TODO: learn FudgeNet
            // let host = new FudgeServer();
            // host.startUp(+portHost.value);
            // console.log(host);
        }
        else {
            alert("Your Port is not a number");
        }
    }
    function conneting() {
        let client = new ƒClient();
        client.connectToServer(IPConnection.value + PortConnection.value);
        console.log(+IPConnection.value);
        console.log(IPConnection.value + PortConnection.value);
    }
    //#endregion "FudgeNetComponent"
})(Game || (Game = {}));
//# sourceMappingURL=data:application/json;base64,