/**
 * Goes through all GLSL-Shaders in this folder and turns them into "TypeScript-Shaders".
 * A vertex-shader (.vert) and a fragment-shader(.frag) with the same file name are required
 * @authors Luis Keck, HFU, 2021 | Jirka Dell'Oro-Friedl, HFU, 2022
 */
import * as fs from "fs";
import { argv } from "process";

let json = JSON.parse(fs.readFileSync(argv[2], { encoding: 'utf8' }));
let collected = {};

for (let name in json) {
  console.log(name);
  let description = json[name];
  let code = "";

  code += `/** Code generated by CompileShaders.mjs using the information in ${argv[2]} */\n\n`;

  code += `export abstract class ${name} extends Shader {\n`;

  if (description.register == "true")
    code += `  public static readonly iSubclass: number = Shader.registerSubclass(${name});\n\n`;

  if (description.define)
    code += `  public static define: string[] = ${JSON.stringify(description.define, null, 4)};\n\n`;
  else
    code += `  public static define: string[] = [];\n\n`;

  if (description.coat)
    code += `  public static getCoat(): typeof Coat { return ${description.coat}; }\n\n`;

  let vertex = fs.readFileSync(description.vertex, { encoding: 'utf8' })
  if (!collected[description.vertex]) {
    collected[description.vertex] = vertex;
  }
  code += `  public static getVertexShaderSource(): string { \n`;
  code += `    return this.insertDefines(shaderSources["${description.vertex}"], this.define);\n`;
  code += `  }\n\n`;


  let fragment = fs.readFileSync(description.fragment, { encoding: 'utf8' })
  if (!collected[description.fragment]) {
    collected[description.fragment] = fragment;
  }
  code += `  public static getFragmentShaderSource(): string { \n`;
  code += `    return this.insertDefines(shaderSources["${description.fragment}"], this.define);\n`;
  code += `  }\n\n`;

  code += `}`;

  if (description.namespace) {
    code = `namespace ${description.namespace} {\n` + code + `\n}`;
  }

  fs.writeFileSync(description.outdir + "/" + name + ".ts", code);
}

// write collected shader sources to file SourceStrings.ts
let shaderSourcesFile = `namespace ${argv[3]} {\n  export let shaderSources: {[source: string]: string} = {};\n`;
for (let source in collected) {
  shaderSourcesFile += `  shaderSources["${source}"] = \`${collected[source]}\`;\n`
}
shaderSourcesFile += `\n}`
fs.writeFileSync("Build/SourceStrings.ts", shaderSourcesFile);
